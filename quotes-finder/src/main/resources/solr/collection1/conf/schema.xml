<?xml version="1.0" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- The Solr schema file. This file should be named "schema.xml" and should 
	be located where the classloader for the Solr webapp can find it. This schema 
	is used for testing, and as such has everything and the kitchen sink thrown 
	in. See example/solr/conf/schema.xml for a more concise example. -->

<schema name="test" version="1.1">

	<types>
		<!-- field type definitions. The "name" attribute is just a label to be 
			used by field definitions. The "class" attribute and any other attributes 
			determine the real behavior of the fieldType. Class names starting with "solr" 
			refer to java classes in the org.apache.solr.analysis package. -->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. - 
			StrField and TextField support an optional compressThreshold which limits 
			compression (if enabled in the derived fields) to values which exceed a certain 
			size (in characters). -->
		<fieldType name="string" class="solr.StrField"
			sortMissingLast="true" omitNorms="true" />

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField"
			sortMissingLast="true" omitNorms="true" />

		<!-- The optional sortMissingLast and sortMissingFirst attributes are currently 
			supported on types that are sorted internally as strings. - If sortMissingLast="true", 
			then a sort on this field will cause documents without the field to come 
			after documents with the field, regardless of the requested sort order (asc 
			or desc). - If sortMissingFirst="true", then a sort on this field will cause 
			documents without the field to come before documents with the field, regardless 
			of the requested sort order. - If sortMissingLast="false" and sortMissingFirst="false" 
			(the default), then default lucene sorting will be used which places docs 
			without the field first in an ascending sort and last in a descending sort. -->

		<!-- solr.TextField allows the specification of custom text analyzers specified 
			as a tokenizer and a list of token filters. Different analyzers may be specified 
			for indexing and querying. The optional positionIncrementGap puts space between 
			multiple fields of this type on the same document, with the purpose of preventing 
			false phrase matching across fields. For more info on customizing your analyzer 
			chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->

		<!-- One can also specify an existing Analyzer class that has a default 
			constructor via the class attribute on the analyzer element <fieldType name="text_greek" 
			class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/> 
			</fieldType> -->

		<!-- A text field that only splits on whitespace for exact matching of 
			words -->
		<fieldType name="text_ws" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- Less flexible matching, but less false matches. Probably not ideal 
			for product names, but may be good for SKUs. Can insert dashes in the wrong 
			place and still match. -->
		<fieldType name="textTight" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="0" generateNumberParts="0" catenateWords="1"
					catenateNumbers="1" catenateAll="0" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.EnglishMinimalStemFilterFactory" />
				<filter class="solr.RemoveDuplicatesTokenFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- This is an example of using the KeywordTokenizer along With various 
			TokenFilterFactories to produce a sortable field that does not include some 
			properties of the source text -->
		<fieldType name="alphaOnlySort" class="solr.TextField"
			sortMissingLast="true" omitNorms="true">
			<analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire input 
					string is preserved as a single token -->
				<tokenizer class="solr.KeywordTokenizerFactory" />
				<!-- The LowerCase TokenFilter does what you expect, which can be when 
					you want your sorting to be case insensitive -->
				<filter class="solr.LowerCaseFilterFactory" />
				<!-- The TrimFilter removes any leading or trailing whitespace -->
				<filter class="solr.TrimFilterFactory" />
				<!-- The PatternReplaceFilter gives you the flexibility to use Java Regular 
					expression to replace any sequence of characters matching a pattern with 
					an arbitrary replacement string, which may include back refrences to portions 
					of the orriginal string matched by the pattern. See the Java Regular Expression 
					documentation for more infomation on pattern and replacement string syntax. 
					http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html -->
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])"
					replacement="" replace="all" />
			</analyzer>
		</fieldType>

		<!-- since fields of this type are by default not stored or indexed, any 
			data added to them will be ignored outright -->
		<fieldtype name="ignored" stored="false" indexed="false"
			class="solr.StrField" />

	</types>

	<field name="id" type="string" indexed="true" stored="true"
		multiValued="false" required="false" />
	<field name="author" type="string" indexed="false" stored="true" />
	<field name="sentence" type="textTight" indexed="true" stored="true" />

	<uniqueKey>id</uniqueKey>


</schema>











